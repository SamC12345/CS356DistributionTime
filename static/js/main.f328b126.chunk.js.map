{"version":3,"sources":["ColorModeSwitcher.js","logo.svg","Logo.js","ClientServerGraph.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","keyframes","numClients","fileSize","ClientServerGraph","clientServerData","id","data","map","x","y","Math","max","peerToPeerData","margin","top","right","bottom","left","xScale","type","yScale","min","stacked","reverse","yFormat","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","from","pointLabelYOffset","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","style","itemBackground","App","textAlign","minH","p","justifySelf","spacing","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f328b126.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","export default __webpack_public_path__ + \"static/media/logo.034ef726.svg\";","import React from 'react';\nimport { Image, keyframes, usePrefersReducedMotion } from '@chakra-ui/react';\nimport logo from './logo.svg';\n\nconst spin = keyframes`\n  from { transform: rotate(0deg); }\n  to { transform: rotate(360deg); }\n`;\n\nexport const Logo = props => {\n  const prefersReducedMotion = usePrefersReducedMotion();\n\n  const animation = prefersReducedMotion\n    ? undefined\n    : `${spin} infinite 20s linear`;\n\n  return <Image animation={animation} src={logo} {...props} />;\n};\n","import React from 'react';\nimport { ResponsiveLine } from 'nivo';\n\nconst data = [\n  {\n    id: 'japan',\n    color: 'hsl(136, 70%, 50%)',\n    data: [\n      {\n        x: 'plane',\n        y: 205,\n      },\n      {\n        x: 'helicopter',\n        y: 43,\n      },\n      {\n        x: 'boat',\n        y: 145,\n      },\n      {\n        x: 'train',\n        y: 158,\n      },\n      {\n        x: 'subway',\n        y: 233,\n      },\n      {\n        x: 'bus',\n        y: 74,\n      },\n      {\n        x: 'car',\n        y: 122,\n      },\n      {\n        x: 'moto',\n        y: 49,\n      },\n      {\n        x: 'bicycle',\n        y: 184,\n      },\n      {\n        x: 'horse',\n        y: 78,\n      },\n      {\n        x: 'skateboard',\n        y: 18,\n      },\n      {\n        x: 'others',\n        y: 57,\n      },\n    ],\n  },\n  {\n    id: 'france',\n    color: 'hsl(150, 70%, 50%)',\n    data: [\n      {\n        x: 'plane',\n        y: 78,\n      },\n      {\n        x: 'helicopter',\n        y: 9,\n      },\n      {\n        x: 'boat',\n        y: 144,\n      },\n      {\n        x: 'train',\n        y: 47,\n      },\n      {\n        x: 'subway',\n        y: 293,\n      },\n      {\n        x: 'bus',\n        y: 163,\n      },\n      {\n        x: 'car',\n        y: 84,\n      },\n      {\n        x: 'moto',\n        y: 41,\n      },\n      {\n        x: 'bicycle',\n        y: 88,\n      },\n      {\n        x: 'horse',\n        y: 214,\n      },\n      {\n        x: 'skateboard',\n        y: 188,\n      },\n      {\n        x: 'others',\n        y: 41,\n      },\n    ],\n  },\n];\n\nconst numClients = [1, 2, 4, 8, 16, 32, 64, 128, 256];\nconst fileSize = 2000;\nconst uploadRateServer = 10;\nconst uploadRateClient = 1;\nconst downloadRateClient = 2;\n\nexport const ClientServerGraph = () => {\n  const clientServerData = {\n    id: 'Client Server Data',\n    color: 'hsl(136, 70%, 50%)',\n    data: numClients.map(numClients => {\n      return {\n        x: numClients,\n        y: Math.max(\n          (numClients * fileSize) / uploadRateServer,\n          fileSize / downloadRateClient\n        ),\n      };\n    }),\n  };\n\n  const peerToPeerData = {\n    id: 'Peer To Peer Data',\n    color: 'hsl(150, 70%, 50%)',\n    data: numClients.map(numClients => {\n      return {\n        x: numClients,\n        y: Math.max(\n          fileSize / uploadRateServer,\n          fileSize / downloadRateClient,\n          (numClients * fileSize) /\n            (numClients * uploadRateClient + uploadRateServer)\n        ),\n      };\n    }),\n  };\n\n  return (\n    <ResponsiveLine\n      data={[clientServerData, peerToPeerData]}\n      margin={{ top: 100, right: 100, bottom: 100, left: 100 }}\n      xScale={{ type: 'linear' }}\n      yScale={{\n        type: 'linear',\n        min: 'auto',\n        max: 'auto',\n        stacked: true,\n        reverse: false,\n      }}\n      yFormat=\" >-.2f\"\n      axisTop={null}\n      axisRight={null}\n      axisBottom={{\n        orient: 'bottom',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'Number of Clients',\n        legendOffset: 36,\n        legendPosition: 'middle',\n      }}\n      axisLeft={{\n        orient: 'left',\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: 'Minimum Distribution Time',\n        legendOffset: -40,\n        legendPosition: 'middle',\n      }}\n      pointSize={20}\n      pointColor={{ theme: 'background' }}\n      pointBorderWidth={2}\n      pointBorderColor={{ from: 'serieColor' }}\n      pointLabelYOffset={-12}\n      useMesh={true}\n      legends={[\n        {\n          anchor: 'bottom-right',\n          direction: 'column',\n          justify: false,\n          translateX: 100,\n          translateY: 0,\n          itemsSpacing: 0,\n          itemDirection: 'left-to-right',\n          itemWidth: 80,\n          itemHeight: 20,\n          itemOpacity: 0.75,\n          symbolSize: 12,\n          symbolShape: 'circle',\n          symbolBorderColor: 'rgba(0, 0, 0, .5)',\n          effects: [\n            {\n              on: 'hover',\n              style: {\n                itemBackground: 'rgba(0, 0, 0, .03)',\n                itemOpacity: 1,\n              },\n            },\n          ],\n        },\n      ]}\n    />\n  );\n};\n","import React from 'react';\nimport {\n  ChakraProvider,\n  Box,\n  Text,\n  Link,\n  VStack,\n  Code,\n  Heading,\n  Spacer,\n  Grid,\n  theme,\n  HStack,\n} from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport { Logo } from './Logo';\nimport { ClientServerGraph } from './ClientServerGraph';\n\nfunction App() {\n  return (\n    <ChakraProvider theme={theme}>\n      <Box textAlign=\"center\" fontSize=\"xl\">\n        <Grid minH=\"100vh\" p={3}>\n          <HStack>\n            <VStack justifySelf=\"flex-center\" spacing={0}>\n              <Spacer />\n              <Heading>\n                Distribution Time for Client-Server and P2P Architectures\n              </Heading>\n              <Text>Samuel Carlos CS356 Section 003 </Text>\n            </VStack>\n            <ColorModeSwitcher justifySelf=\"flex-end\" />\n          </HStack>\n          <VStack spacing={8}>\n            <ClientServerGraph></ClientServerGraph>\n          </VStack>\n        </Grid>\n      </Box>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}